(1 (2 (3 nil nil) (4 nil nil)) (5 nil nil))

(define (tree->list-1 tree) ; inorder O(n*log n)
  (if (null? tree)
      '()
      (append (tree->list-1 (left-branch tree))
              (cons (entry tree)
                    (tree->list-1 (right-branch tree))))))

(tree-list-1 (2 (...) (...))) `append` (1 : (tree->list-1 (5 nil nil)))
((tree-list-1 (3 nil nil)) `append` (2 : (tree->list-1 (4 nil nil)))) `append` (1 : (tree->list-1 (5 nil nil)))
(((tree-list-1 nil) `append` (3 : (tree->list-1 nil))) `append` (2 : (tree->list-1 (4 nil nil)))) `append` (1 : (tree->list-1 (5 nil nil)))
(([] `append` (3 : [])) `append` (2 : (tree->list-1 (4 nil nil)))) `append` (1 : (tree->list-1 (5 nil nil)))
([3] `append` (2 : (tree->list-1 (4 nil nil)))) `append` (1 : (tree->list-1 (5 nil nil)))
([3] `append` (2 : ([] `append` [4])) `append` (1 : (tree->list-1 (5 nil nil)))
([3] `append` (2 : [4]) `append` (1 : (tree->list-1 (5 nil nil)))
[3, 2, 4] `append` (1 : (tree->list-1 (5 nil nil)))
[3, 2, 4] `append` (1 : ((tree->list-1 nil) `append` (5 : (tree->list-1 nil)))
[3, 2, 4] `append` (1 : [5])
[3, 2, 4] `append` [1, 5]
[3, 2, 4, 1, 5]

(define (tree->list-2 tree) ; inorder O(n)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-tolist (left-branch tree)
                     (cons (entry-tree)
                           (copy-to-list (right-branch tree)
                                         result-list)))))
(copy-to-list tree '()))

(copy-to-list (1 (...) (...)) '())
(copy-to-list (2 (...) (...)) (1 : (copy-to-list (5 [] []) [])))
(copy-to-list (3 [] []) (2 : (copy-to-list (4 [] []) (1: (copy-to-list (5 [] []) [])))))
(copy-to-list [] (3 : (copy-to-list [] (2 : (copy-to-list (4 [] []) (1: (copy-to-list (5 [] []) [])))))))
(copy-to-list [] (3 : (2 : (copy-to-list (4 [] []) (1: (copy-to-list (5 [] []) []))))))
(copy-to-list [] (3 : (2 : (copy-to-list (4 [] []) (1: (copy-to-list (5 [] []) []))))))
(3 : (2 : (copy-to-list (4 [] []) (1: (copy-to-list (5 [] []) [])))))
(3 : (2 : [4, 1, 5]))
[3, 2, 4, 1, 5]

(copy-to-list (4 [] []) (1: (copy-to-list (5 [] []) [])))
(copy-to-list [] (4 : (copy-to-list [] (1: (copy-to-list (5 [] []) []))))
(4 : (copy-to-list [] (1: (copy-to-list (5 [] []) []))))
(4 : (1: (copy-to-list (5 [] []) []) []))
(4 : (1: (copy-to-list [] (5 : (copy-to-list [] [])))))
(4 : (1: (5 : (copy-to-list [] []))))
(4 : (1: (5 : [])))
[4, 1, 5]
