(define (partial-tree elements n)
  (if (= n 0)
      (cons '() elements)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elements left-size)))
          (let ((left-tree (car left-result))
                (non-left-elements (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elements))
                  (right-result (partial-tree (cdr non-left-elements)
                                              right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elements (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elements))))))))

(partial-tree '(1 3 5 7 9 11) 6)
  (partial-tree '(1 3 5 7 9 11) 2)
    (partial-tree '(1 3 5 7 9 11) 0)
    // left-result ('() . '(1 3 5 7 9 11))
    // left-tree '()
    // non-left-elements '(1 3 5 7 11)
    // this-entry 1
    (partial-tree '(3 5 7 11) 1)
      (partial-tree '() 0)
      // left-result ('() . '(3 5 7 9 11))
      // left-tree '()
      // non-left-elements '(3 5 7 9 11)
      // this-entry 3
      (partial-tree '(5 7 9 11) 0)
      // right-result ('() . '(5 7 9 11))
      // right-tree '()
      // remaining-elements '(5 7 9 11)
    // right-result ('(3 () ()) . '(5 7 9 11))
    // right-tree '(3 () ())
    // remaining-elements '(5 7 9 11)
  // left-result ('(1 () (3 () ())) . '(5 7 9 11))
  // left-tree '(1 () (3 () ()))
  // non-left-elements '(5 7 9 11)
  // this-entry 5
  (partial-tree '(7 9 11) 3)
    (partial-tree '(7 9 11) 1)
      (partial-tree '(7 9 11) 0)
      // left-result ('() . '(7 9 11))
      // left-tree '()
      // non-left-elements '(7 9 11)
      // this-entry 7
      (partial-tree '(9 11) 0)
      // right-result ('() . '(9 11))
      // right-tree '()
      // remaining-elements '(9 11)
    // left-result ('(7 () ()) . '(9 11))
    // left-tree '(7 () ())
    // non-left-elements '(9 11)
    // this-entry 9
    (partial-tree '(11) 1)
      (partial-tree '(11) 0)
      // left-result ('() . '(11))
      // left-tree '()
      // non-left-elements '(11)
      // this-entry 11
      (partial-tree '() 0)
      // right-result ('() . '())
      // right-tree '()
      // remaining-elements '()
    // right-result ('(11 () ()) . '())
    // right-tree '(11 () ())
    // remaining-elements '()
  // right-result ((9 (7 () ()) (11 () ())) . '())
  // right-tree '(9 (7 () ()) (11 () ()))
  // remaining-elements '()
  ('(5 (1 () (3 () ())) (9 (7 () ()) (11 () ()))) . '())

T(n) = 2T((n - 1) / 2) + O(1)
